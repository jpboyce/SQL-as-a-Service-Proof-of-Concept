'@type': "SoftwareComponentType"
createdDate: "2016-02-27T01:49:38.242Z"
lastUpdated: "2016-02-29T00:54:30.794Z"
id: "Software.SQLAASSetupAlwaysOnAvailabilityGroup"
name: "SQLAAS - Setup AlwaysOn Availability Group"
publishStatus: "PUBLISHED"
publishStatusName: "Published"
schema:
  fields:
  - id: "IPAM_forwardlookupserver"
    label: "IPAM_forwardlookupserver"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "SQL_AvailabilityGroupName"
    label: "SQL_AvailabilityGroupName"
    description: "Name of the Availability Group to be created"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "AG1"
    isMultiValued: false
  - id: "sql_nodes"
    label: "sql_nodes"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "multiple"
            elementTypeId: "STRING"
            items:
            - type: "string"
              value: "None"
    isMultiValued: true
  - id: "AD_User"
    label: "AD_User"
    description: "User with rights to create the objects"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "contoso\\vRA-CL-Admin"
    isMultiValued: false
  - id: "AD_Password"
    label: "AD_Password"
    description: "AD User Password"
    dataType:
      type: "primitive"
      typeId: "SECURE_STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "secureString"
            value: ""
      - type: "encrypted"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "SQL_InstanceName"
    label: "SQL_InstanceName"
    description: "SQL Instance Name"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "SQLAAS_2012"
    isMultiValued: false
  - id: "IPAM_ConnectionURI"
    label: "IPAM_ConnectionURI"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "IPAM_Username"
    label: "IPAM_Username"
    description: "User to run IPAM operations"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "IPAM_Server"
    label: "IPAM_Server"
    description: "IPAM Server Name/IP"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "fsw_node"
    label: "fsw_node"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "IPAM_Password"
    label: "IPAM_Password"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "IPAM_forwardlookupzone"
    label: "IPAM_forwardlookupzone"
    description: ""
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "host"
    label: "Container"
    description: ""
    dataType:
      type: "ref"
      componentTypeId: "com.vmware.csp.iaas.blueprint.service"
      classId: "Infrastructure.Machine.Schema"
      label: "Machine"
    state:
      dependencies: []
      facets:
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
      - type: "visible"
        value:
          type: "constantClause"
          value:
            type: "boolean"
            value: false
    isMultiValued: false
containerFieldId: "host"
lifecycleTasks:
- createdDate: "2016-02-27T01:49:38.242Z"
  lastUpdated: "2016-03-03T12:55:59.679Z"
  script:
    scriptContent: "# SQL AAG Setup\n\n# Setup Variables\n$sql_nodes = $sql_nodes\n\
      $FSW_node = $fsw_node\n$SQL_InstanceName = $SQL_InstanceName\n$AD_User = $AD_User\
      \                     # User with rights to create the object\n$AD_Password\
      \ = $AD_Password                   # Password of the user\n$convertedpassword\
      \ = $AD_Password | ConvertTo-SecureString -AsPlainText -Force\n$credential =\
      \ New-Object System.Management.Automation.PSCredential($AD_User,$convertedpassword)\n\
      \n# IPAM Variables\n$ClusterName = Get-Content -Path C:\\ClusterShortName.txt\n\
      $ClusterListener = $ClusterName.Replace(\"C_\",\"CL_\")\n$ClusterListenerIP\
      \ = Get-Content -Path c:\\ClusterListenerIP.txt\n\nWrite-Output \"Listener Name\
      \ is $ClusterListener\"\nWrite-Output \"Listener IP is $ClusterListenerIP\"\
      \ \n\nWrite-Output \"Importing SQL Powershell Module...\"\nImport-Module -Name\
      \ SQLPS -DisableNameChecking -Verbose\nWrite-Output \"Confirming its loaded...\"\
      \nGet-Module -Name SQLPS\n\nWrite-Output \"`nCreating new Session to $FSW_node\"\
      \n$session = New-PSSession -ComputerName $FSW_node -Credential $credential -EnableNetworkAccess\
      \ -Authentication Credssp \n\nWrite-Output \"`nStarting commands...\"\nInvoke-Command\
      \ -Session $session -ScriptBlock {\n\n$dnsFullName = $args[4]\n$dnsShortName\
      \ = $dnsFullName.Substring(0,15)\n$dnscreationdate = Get-Date\nwrite-output\
      \ $dnscreationdate\nAdd-DNSServerResourceRecordA -Name $dnsShortName -ZoneName\
      \ \"contoso.com\" -IPv4Address $args[3] -ComputerName \"dnssvr.contoso.com\"\
      \ -AllowUpdateAny -CreatePtr -Verbose | Out-File c:\\ListenerDNS.txt\n\n$SQL_Replicas\
      \ = @()\n$SQL_EndpointPort = \"5022\"\n$SQL_AGName = $args[2]\n$SQL_DBName =\
      \ \"AdventureWorks2012\"\n\nforeach ($node in $args[0])\n    {\n    $instances\
      \ = $args[1]\n    $SQL_Path = \"SQLSERVER:SQL\\\"+$node+\"\\\"+$instances[0]\n\
      write-output \"`nThe SQL Path being used is $SQL_path\"\n    $SQL_ServerInstance\
      \ = $node+\"\\\"+$instances[0]\nwrite-output \"The SQL Instance being used is\
      \ $SQL_serverinstance\"\n    $SQL_EndpointURL = \"TCP://\"+$node+\":5022\"\n\
      write-output \"The Endpoint URL being used is $SQL_EndpointURL\"\n    # Enable\
      \ AlwaysOn\n    Write-Output \"`nEnabling Always On for $SQL_ServerInstance\"\
      \n    Enable-SqlAlwaysOn -ServerInstance $SQL_ServerInstance -Force\n\n    #\
      \ Create Endpoint\n    Write-Output \"`nCreating Endpoint on $SQL_Path\"\n \
      \   New-SqlHADREndpoint -Name \"AlwaysOn_Endpoint\" -Port 5022 -Path $SQL_Path\n\
      $endpointpath = \"$SQL_Path\\Endpoints\\AlwaysOn_Endpoint\"\n    Write-Output\
      \ \"Starting endpoint on path $endpointpath...\"\n    Set-SQLHADREndpoint -Path\
      \ $endpointpath -State \"Started\"\n    # Creating replica\n    Write-Output\
      \ \"`nCreating replica using endpoint $SQL_EndpointURL using $SQL_ServerInstance\"\
      \n    $SQL_Replicas += (New-SqlAvailabilityReplica -Name $SQL_ServerInstance\
      \ -EndpointUrl $SQL_EndpointURL -AvailabilityMode SynchronousCommit -FailoverMode\
      \ Automatic -ConnectionModeInSecondaryRole AllowReadIntentConnectionsOnly -AsTemplate\
      \ -Version 11)\n\n    } \n\n    Write-Output \"Replicas generated:\"\n    $SQL_Replicas\
      \ | ft\n\n    # Create Availability Group\n    $primarypath= \"SQLSERVER:SQL\\\
      \"+$SQL_Replicas[0].Name\n    Write-Output \"`nCreating availablity group $args[2]\
      \ using primary path $primarypath\"\n    #New-SqlAvailabilityGroup -Name $SQL_AGName\
      \ -Path $primarypath -AvailabilityReplica ($SQL_Replicas) -Database $SQL_DBName\
      \ -Verbose \n    New-SqlAvailabilityGroup -Name $args[2] -Path $primarypath\
      \ -AvailabilityReplica ($SQL_Replicas) -Verbose \n    \n    # Join the other\
      \ replicas\n    $secondaries = $SQL_Replicas | select -skip 1\n    Write-Output\
      \ \"`nAdding other replicas $secondaries \"\n    foreach ($replica in $secondaries)\n\
      \    {\n    $replicapath = \"SQLSERVER:SQL\\\"+$replica.name\n    Write-Output\
      \ \"Joining $replicapath to Availability Group\"\n    Join-SqlAvailabilityGroup\
      \ -Name $args[2] -Path $replicapath -Verbose\n\n    #$databasepath = $replicapath\
      \ +\"\\AvailabilityGroups\\\"+$SQL_AGName\n    #Write-Output \"Adding Database\
      \ $SQL_DBName to path $databasepath\"\n    #Add-SqlAvailabilityDatabase -Path\
      \ $databasepath -Database $SQL_DBName -Verbose\n    }\n    $listenerpath = $primarypath+\"\
      \\AvailabilityGroups\\\"+$SQL_AGName\n    Write-Output \"Args 3 is below\"\n\
      \    Write-Output $args[3]\n$listenerstaticip = $args[3]+\"/255.255.255.0\"\n\
      write-output \"Creating New Listener on path $listenerpath with static IP $listenerstaticip\"\
      \n    New-SqlAvailabilityGroupListener -Name $args[4] -StaticIp $listenerstaticip\
      \ -Path $listenerpath -Verbose -ErrorAction Continue\n#start-sleep -seconds\
      \ 10000\n    # Test AG\n    #Test-SqlAvailabilityGroup -Path $databasepath\n\
      \    \n    # Create Quorum\nWrite-Output \"Setting Quorum\"\n$FSW_Name = $args[6]\n\
      $FSW_Name2 = $FSW_Name.Substring(0,6)\n#$FSW_Name2 = $FSW_Name2+\".contoso.com\"\
      \n\n$FSW_Quorum_Path = \"\\\\\"+ $FSW_Name2 +\"\\FSW\" \nwrite-output \"Quroum\
      \ Path is going to be on $FSW_Name2 as $FSW_Quorum_Path\"\n    Get-Cluster $args[5]\
      \ | Set-ClusterQuorum -NodeAndFileShareMajority $FSW_Quorum_Path -Verbose\n\
      } -ArgumentList $sql_nodes, $SQL_InstanceName, $SQL_AvailabilityGroupName, $ClusterListenerIP,\
      \ $ClusterListener, $ClusterName, $FSW_node"
    isRebootAfter: false
    scriptTypeId: "powershell"
  taskDescriptorRef:
    id: "INSTALL"
    label: "Install"
